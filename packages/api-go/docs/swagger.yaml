definitions:
  dto.CreatePostDto:
    properties:
      content:
        maxLength: 12000
        type: string
      is_public:
        type: boolean
    required:
    - content
    type: object
  dto.CreateUserDto:
    properties:
      bio:
        maxLength: 400
        type: string
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
      password_confirm:
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    - password_confirm
    type: object
  dto.GetUserResponseDto:
    properties:
      bio:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  dto.ListPostResponseDto:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      is_private:
        type: boolean
      like_count:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/dto.ListPostUserDto'
      user_liked_this_post:
        type: boolean
    type: object
  dto.ListPostUserDto:
    properties:
      bio:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  dto.LoginRequestDto:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponseDto:
    properties:
      access_token:
        type: string
      user:
        $ref: '#/definitions/dto.UserResponseDto'
    type: object
  dto.PostCreatedResponseDto:
    properties:
      content:
        type: string
      id:
        type: string
      is_public:
        type: boolean
    type: object
  dto.PostResponseDto:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      is_public:
        type: boolean
      updated_at:
        type: string
    type: object
  dto.PostUpdatedResponseDto:
    properties:
      content:
        type: string
      id:
        type: string
      is_public:
        type: boolean
    type: object
  dto.UpdatePostDto:
    properties:
      content:
        maxLength: 12000
        type: string
      is_public:
        type: boolean
    required:
    - content
    type: object
  dto.UpdateUserDto:
    properties:
      bio:
        maxLength: 400
        type: string
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
      password_confirm:
        type: string
    required:
    - email
    - name
    type: object
  dto.UserResponseDto:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  errs.ErrorResponse:
    properties:
      details:
        type: string
      message:
        type: string
    type: object
info:
  contact: {}
  description: This is an API for a very simple text based social network.
  title: Simple Social Network API
  version: "1.0"
paths:
  /v1/posts:
    get:
      description: Lists posts from other users (public only)
      parameters:
      - description: Page size (1-50)
        in: query
        name: page_size
        type: integer
      - description: Last seen post ID
        in: query
        name: last_seen_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ListPostResponseDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List posts
      tags:
      - Posts
    post:
      consumes:
      - application/json
      description: Creates a new post for the authenticated user
      parameters:
      - description: Post content
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePostDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.PostCreatedResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Creates a new post
      tags:
      - Posts
  /v1/posts/{id}:
    delete:
      description: Deletes a post by ID, only if it belongs to the authenticated user
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Deletes a post
      tags:
      - Posts
    get:
      description: Retrieves a post by ID (owned by the user)
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PostResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Gets a post
      tags:
      - Posts
    put:
      consumes:
      - application/json
      description: Updates a post's content and visibility
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated post content
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePostDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PostUpdatedResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Updates a post
      tags:
      - Posts
  /v1/posts/{id}/likes:
    delete:
      description: Removes Like from a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Removes Like from a post
      tags:
      - Posts
    post:
      description: Likes a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Likes a post
      tags:
      - Posts
  /v1/posts/my-posts:
    get:
      description: Lists posts created by the authenticated user
      parameters:
      - description: Page size (1-50)
        in: query
        name: page_size
        type: integer
      - description: Last seen post ID
        in: query
        name: last_seen_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ListPostResponseDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Lists my posts
      tags:
      - Posts
  /v1/users:
    post:
      consumes:
      - application/json
      description: Creates a user with name, email, password and optional bio
      parameters:
      - description: User payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Register a new user
      tags:
      - Users
  /v1/users/exists:
    get:
      description: Returns whether a user with the given email exists
      parameters:
      - description: Email to check
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Check if email exists
      tags:
      - Users
  /v1/users/login:
    post:
      consumes:
      - application/json
      description: Logs in a user using email and password
      parameters:
      - description: Login credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      summary: Authenticate user
      tags:
      - Users
  /v1/users/me:
    get:
      description: Fetch details of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetUserResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get current user
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update the authenticated user with name, email, password, and bio
      parameters:
      - description: User update payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errs.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update current user
      tags:
      - Users
securityDefinitions:
  ApiKeyAuth:
    description: A Bearer token used for user authorization
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
